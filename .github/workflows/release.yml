name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Build for all platforms
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT=$(git rev-parse HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          LDFLAGS="-X 'forgor/cmd.Version=$VERSION' -X 'forgor/cmd.GitCommit=$COMMIT' -X 'forgor/cmd.BuildDate=$BUILD_DATE'"

          mkdir -p dist

          echo "Building release binaries..."

          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/forgor-linux-arm64 .
          GOOS=linux GOARCH=arm go build -ldflags "$LDFLAGS" -o dist/forgor-linux-arm .

          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/forgor-darwin-arm64 .

          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-windows-amd64.exe .

          echo "Build complete:"
          ls -la dist/

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          echo "Checksums:"
          cat checksums.txt
          cd ..

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Try to extract changelog for this version
          if [ -f "CHANGELOG.md" ]; then
            # Extract section for this version from CHANGELOG.md
            sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
            
            # If the release notes are empty, create a default message
            if [ ! -s release_notes.md ]; then
              echo "## Changes in $VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "See the full commit history for detailed changes." >> release_notes.md
            fi
          else
            # Create default release notes
            echo "## Changes in $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See the full commit history for detailed changes." >> release_notes.md
          fi

          echo "Release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          files: |
            dist/*
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
