name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

          # Get commit info
          COMMIT=$(git rev-parse HEAD)
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

          echo "Building version: $VERSION"
          echo "Commit: $COMMIT"
          echo "Build date: $BUILD_DATE"

      - name: Build binaries
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT="${{ steps.version.outputs.commit }}"
          BUILD_DATE="${{ steps.version.outputs.build_date }}"

          # Build flags
          LDFLAGS="-X 'forgor/cmd.Version=$VERSION' -X 'forgor/cmd.GitCommit=$COMMIT' -X 'forgor/cmd.BuildDate=$BUILD_DATE'"

          # Create dist directory
          mkdir -p dist

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/forgor-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/forgor-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/forgor-windows-amd64.exe .

          # Create checksums
          cd dist
          sha256sum * > checksums.txt
          cd ..

          echo "Built binaries:"
          ls -la dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the changelog for this version
          VERSION="${{ steps.version.outputs.version }}"

          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog for this version
            awk -v version="$VERSION" '
            BEGIN { in_version = 0; content = "" }
            /^## \[/ {
              if (in_version) exit
              if ($0 ~ "\\[" version "\\]") {
                in_version = 1
                next
              }
            }
            in_version && /^## \[/ { exit }
            in_version { 
              if (content != "") content = content "\n"
              content = content $0
            }
            END { print content }
            ' CHANGELOG.md > release_notes.md
            
            # Check if we got any content
            if [ -s release_notes.md ]; then
              echo "Found changelog for version $VERSION"
            else
              echo "No specific changelog found for version $VERSION, using default"
              echo "Release $VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "See commits for details." >> release_notes.md
            fi
          else
            echo "No CHANGELOG.md found, creating default release notes"
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See commits for details." >> release_notes.md
          fi

          echo "Release notes:"
          cat release_notes.md

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/
