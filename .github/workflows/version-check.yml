name: Version Check

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare versions

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Check VERSION file exists
        run: |
          if [ ! -f "VERSION" ]; then
            echo "‚ùå VERSION file not found!"
            echo "Please create a VERSION file with the current version (e.g., 0.1.0)"
            exit 1
          fi
          echo "‚úÖ VERSION file exists"

      - name: Validate VERSION format
        run: |
          VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-PRERELEASE"
            echo "Examples: 1.0.0, 1.2.3, 2.0.0-beta.1"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check version bump for PRs
        if: github.event_name == 'pull_request'
        run: |
          # Get current version
          CURRENT_VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')

          # Get main branch version
          git fetch origin main
          if git show origin/main:VERSION &>/dev/null; then
            MAIN_VERSION=$(git show origin/main:VERSION | tr -d '\n' | tr -d ' ')
          else
            echo "‚úÖ No VERSION file on main branch, this is the first version"
            exit 0
          fi

          echo "Current version: $CURRENT_VERSION"
          echo "Main branch version: $MAIN_VERSION"

          # Compare versions
          if [ "$CURRENT_VERSION" = "$MAIN_VERSION" ]; then
            echo "‚ùå Version hasn't been bumped!"
            echo ""
            echo "For PRs to main, you must bump the version in the VERSION file."
            echo "Choose the appropriate bump level:"
            echo "  - Patch (bug fixes): $MAIN_VERSION ‚Üí $(echo $MAIN_VERSION | awk -F. '{print $1"."$2"."($3+1)}')"
            echo "  - Minor (new features): $MAIN_VERSION ‚Üí $(echo $MAIN_VERSION | awk -F. '{print $1"."($2+1)".0"}')"
            echo "  - Major (breaking changes): $MAIN_VERSION ‚Üí $(echo $MAIN_VERSION | awk -F. '{print ($1+1)".0.0"}')"
            echo ""
            echo "Update the VERSION file and commit the change."
            exit 1
          fi

          # Basic version comparison (assumes semantic versioning)
          if [ "$CURRENT_VERSION" \< "$MAIN_VERSION" ]; then
            echo "‚ùå New version ($CURRENT_VERSION) is less than main version ($MAIN_VERSION)"
            echo "Please ensure the new version is greater than the current main version"
            exit 1
          fi

          echo "‚úÖ Version bumped from $MAIN_VERSION to $CURRENT_VERSION"

      - name: Version summary
        run: |
          VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')
          COMMIT=$(git rev-parse HEAD)

          echo "## Version Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Format**: Valid SemVer" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Commit**: $COMMIT" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "‚úÖ **Version Bump**: Verified" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version checks passed! üéâ" >> $GITHUB_STEP_SUMMARY
