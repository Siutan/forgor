package cmd

import (
	"fmt"
	"forgor/internal/config"

	"github.com/spf13/cobra"
)

var (
	runForce bool
	runQuiet bool
)

// runCmd represents the run command
var runCmd = &cobra.Command{
	Use:   "run [command]",
	Short: "Execute a shell command with safety checks",
	Long: `Execute a shell command with built-in safety checks and confirmation prompts.

This command provides a safe way to execute commands generated by forgor or any other shell command.
It includes dangerous command detection and confirmation prompts.

If no command is provided, it will execute the last command generated by forgor.

Examples:
  forgor run                             # Execute the last generated command
  forgor run "ls -la"                    # Execute specific command with confirmation  
  forgor run -F "rm temp.txt"            # Force execute without confirmation
  forgor run -q "echo hello"             # Quiet mode (less output)`,
	Args: cobra.MaximumNArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		var command string
		var err error

		if len(args) == 0 {
			// No command provided, use the last generated command
			command, err = config.LoadLastCommand()
			if err != nil {
				return err
			}

			if !runQuiet {
				fmt.Printf("üìã Using last generated command: %s\n", command)
			}
		} else {
			// Command provided as argument
			command = args[0]
		}

		if runQuiet {
			// In quiet mode, suppress some output
			oldVerbose := verbose
			verbose = false
			defer func() { verbose = oldVerbose }()
		}

		if runForce {
			// Force execution - set the global forceRun flag temporarily
			oldForceRun := forceRun
			forceRun = true
			defer func() { forceRun = oldForceRun }()
		}

		if verbose && !runQuiet {
			fmt.Printf("üîç Executing command: %s\n", command)
		}

		return executeCommand(command, []string{})
	},
}

func init() {
	rootCmd.AddCommand(runCmd)

	// Add flags for the run command
	runCmd.Flags().BoolVarP(&runForce, "force", "F", false, "force execute without confirmation (DANGEROUS)")
	runCmd.Flags().BoolVarP(&runQuiet, "quiet", "q", false, "quiet mode - less output")
}
